- name: Setup Linux Environment
  become: yes
  hosts: all
  vars:
    zfs_loopback_pool: "false"
    zfs_loopback_pool_name: "openebs-localpv"
  tasks:
    - name: Set ZFS Debian backports repo
      ansible.builtin.apt_repository:
        repo: "deb http://deb.debian.org/debian bookworm-backports main contrib"
        state: present
        update_cache: yes
      when: "ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

    - name: Set ZFS Debian backports repo source
      ansible.builtin.apt_repository:
        repo: "deb-src http://deb.debian.org/debian bookworm-backports main contrib"
        state: present
        update_cache: yes
      when: "ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

    - name: Install ZFS APT packages
      ansible.builtin.apt:
        name:
          - dpkg-dev
          - linux-headers-generic
          - linux-image-generic
          - zfsutils-linux
          - zfs-dkms
          - nfs-common
        update_cache: yes
        state: present
      when: "ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'"

    - name: Install ZFS EPEL pre-req packages
      ansible.builtin.dnf:
        name:
          - "https://zfsonlinux.org/epel/zfs-release-2-3.el9.noarch.rpm"
        update_cache: true
        state: present
        disable_gpg_check: true
      when: "ansible_architecture == 'x86_64' and (ansible_distribution == 'AlmaLinux' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Red Hat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora')"

    - name: Disable default ZFS EPEL packages
      ansible.builtin.command: |
        dnf config-manager --disable zfs
      when: "ansible_architecture == 'x86_64' and (ansible_distribution == 'AlmaLinux' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Red Hat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora')"

    - name: Enable ZFS kmod EPEL packages
      ansible.builtin.command: |
        dnf config-manager --enable zfs-kmod
      when: "ansible_architecture == 'x86_64' and (ansible_distribution == 'AlmaLinux' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Red Hat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora')"

    - name: Install ZFS EPEL packages
      ansible.builtin.dnf:
        name:
          - zfs
          - nfs-utils
        update_cache: yes
        state: present
      when: "ansible_architecture == 'x86_64' and (ansible_distribution == 'AlmaLinux' or ansible_distribution == 'OracleLinux' or ansible_distribution == 'Red Hat' or ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora')"

    - name: Load ZFS Kernel module
      community.general.modprobe:
        name: zfs
        state: present
        persistent: present

    - name: Setup sparse file volume
      community.general.filesize:
        path: "{{ item.value.path }}"
        size: "{{ item.value.size }}"
        sparse: true
      when: "zfs_loopback_pool == true"
      loop: "{{ zfs_loopback_config | dict2items }}"

    # created rc: 10, updated rc: 20
    - name: Set up ZFS loopback device
      ansible.builtin.shell: |
        DEVICE=$(losetup -J | jq -r '.loopdevices[] | select(.name == "/dev/{{ item.key }}") | .name')
        if [ -z ${DEVICE} ]; then
          MOUNT=$(losetup -J | jq -r '.loopdevices[] | select(."back-file" == "{{ item.value.path }}")')
          losetup /dev/{{ item.key }} {{ item.value.path }}
          exit 10
        elif [ "{{ item.value.size }}" != "$(stat -c%s {{ item.value.path }} | numfmt --to=iec)" ]; then
          losetup -c /dev/{{ item.key }}
          exit 20
        else
          exit 0
        fi
      register: losetup_status
      changed_when: losetup_status.rc == 10 or losetup_status.rc == 20
      failed_when: losetup_status.rc != 0 and losetup_status.rc != 10 and losetup_status.rc != 20
      when: "zfs_loopback_pool == true"
      loop: "{{ zfs_loopback_config | dict2items }}"

#    - name: Create persistent loopback devices
#      ansible.builtin.lineinfile:
#        path: /etc/rc.local
#        line: "losetup /dev/{{ item.key }} {{ item.value.path }}"
#      when: "zfs_loopback_pool == true"
#      loop: "{{ zfs_loopback_config | dict2items }}"

    - name: Add ExecStartPre to the systemd service unit file
      ansible.builtin.blockinfile:
        path: "/etc/systemd/system/zfs-import.target.wants/zfs-import-cache.service"
        insertafter: "^ExecStart="
        marker: "# {mark} ANSIBLE MANAGED BLOCK of losetup commands"
        block: |
          {% for key, value in zfs_loopback_config.items() %}
          ExecStartPre=losetup /dev/{{ key }} {{ value.path }}
          {% endfor %}
      when: "zfs_loopback_pool == true"

#    - name: Set up ZFS devices
#      community.general.filesystem:
#        fstype: ext4
#        dev: /dev/{{ item.key }}
#      loop: "{{ zfs_devices_config | dict2items }}"
#
#    - name: Save ZFS looback device name
#      ansible.builtin.shell: losetup -J | jq -r '.loopdevices[] | select(."back-file" == "{{ default_zfs_loopback_dir }}/{{ default_zfs_loopback_file }}") | .name'
#      register: zfs_loopback_device
#      when: "zfs_loopback_pool == true"
#
    - name: Set up ZFS pool
      ansible.builtin.shell: |
        if ! zpool list {{ zfs_loopback_pool_name }} > /dev/null 2>&1 ; then
          zpool create {{ zfs_loopback_pool_name }} {{ item.key }}
          zpool set autoexpand=on {{ zfs_loopback_pool_name }}
        else
          if [ -z $(zpool status -L | grep -Eo '{{ item.key }}') ]; then
            zpool add {{ zfs_loopback_pool_name }} {{ item.key }}
          fi
        fi
      when: "zfs_loopback_pool == true"
      loop: "{{ zfs_loopback_config | combine(zfs_devices_config) | dict2items }}"
